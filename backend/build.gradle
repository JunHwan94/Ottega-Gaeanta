import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
	ext {
		springBootVer = '2.4.5'
		springDependencyMgmtVer = '1.0.11'
		springLoadedVer = '1.2.8'
		nodePluginVer = '1.3.1'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
		classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
		classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
		classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
	}
}

plugins {
	id 'org.springframework.boot' version "${springBootVer}"
	id 'java'
	id 'idea'
	id "org.sonarqube" version "3.3"
}
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.node-gradle.node'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url "https://repo.spring.io/libs-release" }
	maven { url "https://repo.maven.apache.org/maven2" }
	maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
	maven { url "https://plugins.gradle.org/m2/" }
}

group = 'com.hadoop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

node {
	download = true
	version = '14.17.0'
	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/../frontend")
}

configurations {
	providedRuntime
}

//task deleteVueArtifact(type: Delete) {
//	delete "src/main/webapp/static", "src/main/webapp/index.html", "src/main/webapp/basic-tool/node_modules"
//}

task webpack(type: NpmTask, dependsOn: 'npmInstall') {
	args = ['run','build']
}

processResources.dependsOn 'webpack'

def buildTime() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMdd_HHmm')
	return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
	with copySpec {
		duplicatesStrategy = 'include'
		from "src/main/resources"
		include "**/application*.yml"
		include "**/application*.yaml"
		include "**/application*.properties"
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [(prop.key): String.valueOf(prop.value)])
					filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
					filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
				}
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb' // 몽고db 사용 dependence
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation group: 'org.springframework.data', name: 'spring-data-hadoop', version: '2.5.0.RELEASE'
	implementation 'org.springframework.data:spring-data-hadoop-config:2.5.0.RELEASE'
	implementation 'org.apache.hadoop:hadoop-core:1.2.1'
	implementation 'commons-io:commons-io:2.6'

}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
jacoco {
	toolVersion = "0.8.7"
}
jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled false
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "s05-bigdata-dist_S05P21B206_AXwp_KW6-V6HVf4nJyvW"
		property 'sonar.host.url', 'http://j5b206.p.ssafy.io:5000/'
		property 'sonar.login', '9601c8e6ef9da61d27b78a5d4ca7963cf35d649f'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.projectVersion', '0.0.1-SNAPSHOT'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.coverage.jacoco.xmlReportPaths', '${buildDir}/reports/jacoco/test/jacocoTestReport.xml'
		property 'sonar.java.binaries', '${buildDir}/classes'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.exclusions', '**/test/**, **/Q*.java, **/*Doc*.java, **/resources/**'
	}
}
